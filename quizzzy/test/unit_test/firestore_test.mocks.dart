// Mocks generated by Mockito 5.3.0 from annotations
// in quizzzy/test/unit_test/firestore_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;
import 'dart:typed_data' as _i9;

import 'package:cloud_firestore/cloud_firestore.dart' as _i4;
import 'package:cloud_firestore_platform_interface/cloud_firestore_platform_interface.dart'
    as _i3;
import 'package:cloud_functions/cloud_functions.dart' as _i6;
import 'package:cloud_functions_platform_interface/cloud_functions_platform_interface.dart'
    as _i5;
import 'package:firebase_core/firebase_core.dart' as _i2;
import 'package:hive/hive.dart' as _i7;
import 'package:hive/src/box/default_compaction_strategy.dart' as _i11;
import 'package:hive/src/box/default_key_comparator.dart' as _i10;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeFirebaseApp_0 extends _i1.SmartFake implements _i2.FirebaseApp {
  _FakeFirebaseApp_0(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSettings_1 extends _i1.SmartFake implements _i3.Settings {
  _FakeSettings_1(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeCollectionReference_2<T extends Object?> extends _i1.SmartFake
    implements _i4.CollectionReference<T> {
  _FakeCollectionReference_2(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeWriteBatch_3 extends _i1.SmartFake implements _i4.WriteBatch {
  _FakeWriteBatch_3(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLoadBundleTask_4 extends _i1.SmartFake
    implements _i4.LoadBundleTask {
  _FakeLoadBundleTask_4(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeQuerySnapshot_5<T extends Object?> extends _i1.SmartFake
    implements _i4.QuerySnapshot<T> {
  _FakeQuerySnapshot_5(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeQuery_6<T extends Object?> extends _i1.SmartFake
    implements _i4.Query<T> {
  _FakeQuery_6(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDocumentReference_7<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentReference<T> {
  _FakeDocumentReference_7(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFirebaseFunctionsPlatform_8 extends _i1.SmartFake
    implements _i5.FirebaseFunctionsPlatform {
  _FakeFirebaseFunctionsPlatform_8(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeHttpsCallable_9 extends _i1.SmartFake implements _i6.HttpsCallable {
  _FakeHttpsCallable_9(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeFirebaseFirestore_10 extends _i1.SmartFake
    implements _i4.FirebaseFirestore {
  _FakeFirebaseFirestore_10(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeSnapshotMetadata_11 extends _i1.SmartFake
    implements _i4.SnapshotMetadata {
  _FakeSnapshotMetadata_11(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeDocumentSnapshot_12<T extends Object?> extends _i1.SmartFake
    implements _i4.DocumentSnapshot<T> {
  _FakeDocumentSnapshot_12(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeHttpsCallablePlatform_13 extends _i1.SmartFake
    implements _i5.HttpsCallablePlatform {
  _FakeHttpsCallablePlatform_13(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeHttpsCallableResult_14<T> extends _i1.SmartFake
    implements _i6.HttpsCallableResult<T> {
  _FakeHttpsCallableResult_14(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeBox_15<E> extends _i1.SmartFake implements _i7.Box<E> {
  _FakeBox_15(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

class _FakeLazyBox_16<E> extends _i1.SmartFake implements _i7.LazyBox<E> {
  _FakeLazyBox_16(Object parent, Invocation parentInvocation)
      : super(parent, parentInvocation);
}

/// A class which mocks [FirebaseFirestore].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFirestore extends _i1.Mock implements _i4.FirebaseFirestore {
  MockFirebaseFirestore() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
          returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)))
      as _i2.FirebaseApp);
  @override
  set app(_i2.FirebaseApp? _app) =>
      super.noSuchMethod(Invocation.setter(#app, _app),
          returnValueForMissingStub: null);
  @override
  set settings(_i3.Settings? settings) =>
      super.noSuchMethod(Invocation.setter(#settings, settings),
          returnValueForMissingStub: null);
  @override
  _i3.Settings get settings => (super.noSuchMethod(Invocation.getter(#settings),
          returnValue: _FakeSettings_1(this, Invocation.getter(#settings)))
      as _i3.Settings);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_2<Map<String, dynamic>>(
                  this, Invocation.method(#collection, [collectionPath])))
          as _i4.CollectionReference<Map<String, dynamic>>);
  @override
  _i4.WriteBatch batch() => (super.noSuchMethod(Invocation.method(#batch, []),
          returnValue: _FakeWriteBatch_3(this, Invocation.method(#batch, [])))
      as _i4.WriteBatch);
  @override
  _i8.Future<void> clearPersistence() => (super.noSuchMethod(
      Invocation.method(#clearPersistence, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> enablePersistence(
          [_i3.PersistenceSettings? persistenceSettings]) =>
      (super.noSuchMethod(
              Invocation.method(#enablePersistence, [persistenceSettings]),
              returnValue: _i8.Future<void>.value(),
              returnValueForMissingStub: _i8.Future<void>.value())
          as _i8.Future<void>);
  @override
  _i4.LoadBundleTask loadBundle(_i9.Uint8List? bundle) =>
      (super.noSuchMethod(Invocation.method(#loadBundle, [bundle]),
              returnValue: _FakeLoadBundleTask_4(
                  this, Invocation.method(#loadBundle, [bundle])))
          as _i4.LoadBundleTask);
  @override
  void useFirestoreEmulator(String? host, int? port,
          {bool? sslEnabled = false}) =>
      super.noSuchMethod(
          Invocation.method(
              #useFirestoreEmulator, [host, port], {#sslEnabled: sslEnabled}),
          returnValueForMissingStub: null);
  @override
  _i8.Future<_i4.QuerySnapshot<Map<String, dynamic>>> namedQueryGet(
          String? name,
          {_i3.GetOptions? options = const _i3.GetOptions()}) =>
      (super.noSuchMethod(
          Invocation.method(#namedQueryGet, [name], {#options: options}),
          returnValue: _i8.Future<_i4.QuerySnapshot<Map<String, dynamic>>>.value(
              _FakeQuerySnapshot_5<Map<String, dynamic>>(this,
                  Invocation.method(#namedQueryGet, [name], {#options: options})))) as _i8
          .Future<_i4.QuerySnapshot<Map<String, dynamic>>>);
  @override
  _i4.Query<Map<String, dynamic>> collectionGroup(String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collectionGroup, [collectionPath]),
              returnValue: _FakeQuery_6<Map<String, dynamic>>(
                  this, Invocation.method(#collectionGroup, [collectionPath])))
          as _i4.Query<Map<String, dynamic>>);
  @override
  _i8.Future<void> disableNetwork() => (super.noSuchMethod(
      Invocation.method(#disableNetwork, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i4.DocumentReference<Map<String, dynamic>> doc(String? documentPath) =>
      (super.noSuchMethod(Invocation.method(#doc, [documentPath]),
              returnValue: _FakeDocumentReference_7<Map<String, dynamic>>(
                  this, Invocation.method(#doc, [documentPath])))
          as _i4.DocumentReference<Map<String, dynamic>>);
  @override
  _i8.Future<void> enableNetwork() => (super.noSuchMethod(
      Invocation.method(#enableNetwork, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Stream<void> snapshotsInSync() =>
      (super.noSuchMethod(Invocation.method(#snapshotsInSync, []),
          returnValue: _i8.Stream<void>.empty()) as _i8.Stream<void>);
  @override
  _i8.Future<T> runTransaction<T>(_i4.TransactionHandler<T>? transactionHandler,
          {Duration? timeout = const Duration(seconds: 30),
          int? maxAttempts = 5}) =>
      (super.noSuchMethod(
          Invocation.method(#runTransaction, [transactionHandler],
              {#timeout: timeout, #maxAttempts: maxAttempts}),
          returnValue: _i8.Future<T>.value(null)) as _i8.Future<T>);
  @override
  _i8.Future<void> terminate() => (super.noSuchMethod(
      Invocation.method(#terminate, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> waitForPendingWrites() => (super.noSuchMethod(
      Invocation.method(#waitForPendingWrites, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}

/// A class which mocks [FirebaseFunctions].
///
/// See the documentation for Mockito's code generation for more information.
class MockFirebaseFunctions extends _i1.Mock implements _i6.FirebaseFunctions {
  MockFirebaseFunctions() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FirebaseApp get app => (super.noSuchMethod(Invocation.getter(#app),
          returnValue: _FakeFirebaseApp_0(this, Invocation.getter(#app)))
      as _i2.FirebaseApp);
  @override
  _i5.FirebaseFunctionsPlatform get delegate =>
      (super.noSuchMethod(Invocation.getter(#delegate),
              returnValue: _FakeFirebaseFunctionsPlatform_8(
                  this, Invocation.getter(#delegate)))
          as _i5.FirebaseFunctionsPlatform);
  @override
  Map<dynamic, dynamic> get pluginConstants =>
      (super.noSuchMethod(Invocation.getter(#pluginConstants),
          returnValue: <dynamic, dynamic>{}) as Map<dynamic, dynamic>);
  @override
  _i6.HttpsCallable httpsCallable(String? name,
          {_i5.HttpsCallableOptions? options}) =>
      (super.noSuchMethod(
              Invocation.method(#httpsCallable, [name], {#options: options}),
              returnValue: _FakeHttpsCallable_9(
                  this,
                  Invocation.method(
                      #httpsCallable, [name], {#options: options})))
          as _i6.HttpsCallable);
  @override
  void useFunctionsEmulator(String? host, int? port) =>
      super.noSuchMethod(Invocation.method(#useFunctionsEmulator, [host, port]),
          returnValueForMissingStub: null);
}

/// A class which mocks [CollectionReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockCollectionReference<T extends Object?> extends _i1.Mock
    implements _i4.CollectionReference<T> {
  MockCollectionReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
          Invocation.getter(#firestore),
          returnValue:
              _FakeFirebaseFirestore_10(this, Invocation.getter(#firestore)))
      as _i4.FirebaseFirestore);
  @override
  Map<String, dynamic> get parameters =>
      (super.noSuchMethod(Invocation.getter(#parameters),
          returnValue: <String, dynamic>{}) as Map<String, dynamic>);
  @override
  _i8.Future<_i4.DocumentReference<T>> add(T? data) =>
      (super.noSuchMethod(Invocation.method(#add, [data]),
              returnValue: _i8.Future<_i4.DocumentReference<T>>.value(
                  _FakeDocumentReference_7<T>(
                      this, Invocation.method(#add, [data]))))
          as _i8.Future<_i4.DocumentReference<T>>);
  @override
  _i4.DocumentReference<T> doc([String? path]) => (super.noSuchMethod(
      Invocation.method(#doc, [path]),
      returnValue: _FakeDocumentReference_7<T>(
          this, Invocation.method(#doc, [path]))) as _i4.DocumentReference<T>);
  @override
  _i4.CollectionReference<R> withConverter<R extends Object?>(
          {_i4.FromFirestore<R>? fromFirestore,
          _i4.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeCollectionReference_2<R>(
                  this,
                  Invocation.method(
                      #withConverter, [], {#fromFirestore: fromFirestore, #toFirestore: toFirestore})))
          as _i4.CollectionReference<R>);
  @override
  _i4.Query<T> endAtDocument(_i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(Invocation.method(#endAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery_6<T>(
                  this, Invocation.method(#endAtDocument, [documentSnapshot])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> endAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#endAt, [values]),
              returnValue:
                  _FakeQuery_6<T>(this, Invocation.method(#endAt, [values])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> endBeforeDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#endBeforeDocument, [documentSnapshot]),
              returnValue: _FakeQuery_6<T>(this,
                  Invocation.method(#endBeforeDocument, [documentSnapshot])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> endBefore(List<Object?>? values) => (super.noSuchMethod(
          Invocation.method(#endBefore, [values]),
          returnValue:
              _FakeQuery_6<T>(this, Invocation.method(#endBefore, [values])))
      as _i4.Query<T>);
  @override
  _i8.Future<_i4.QuerySnapshot<T>> get([_i3.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: _i8.Future<_i4.QuerySnapshot<T>>.value(
                  _FakeQuerySnapshot_5<T>(
                      this, Invocation.method(#get, [options]))))
          as _i8.Future<_i4.QuerySnapshot<T>>);
  @override
  _i4.Query<T> limit(int? limit) =>
      (super.noSuchMethod(Invocation.method(#limit, [limit]),
              returnValue:
                  _FakeQuery_6<T>(this, Invocation.method(#limit, [limit])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> limitToLast(int? limit) => (super.noSuchMethod(
          Invocation.method(#limitToLast, [limit]),
          returnValue:
              _FakeQuery_6<T>(this, Invocation.method(#limitToLast, [limit])))
      as _i4.Query<T>);
  @override
  _i8.Stream<_i4.QuerySnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: _i8.Stream<_i4.QuerySnapshot<T>>.empty())
          as _i8.Stream<_i4.QuerySnapshot<T>>);
  @override
  _i4.Query<T> orderBy(Object? field, {bool? descending = false}) =>
      (super.noSuchMethod(
              Invocation.method(#orderBy, [field], {#descending: descending}),
              returnValue: _FakeQuery_6<T>(
                  this,
                  Invocation.method(
                      #orderBy, [field], {#descending: descending})))
          as _i4.Query<T>);
  @override
  _i4.Query<T> startAfterDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAfterDocument, [documentSnapshot]),
              returnValue: _FakeQuery_6<T>(this,
                  Invocation.method(#startAfterDocument, [documentSnapshot])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> startAfter(List<Object?>? values) => (super.noSuchMethod(
          Invocation.method(#startAfter, [values]),
          returnValue:
              _FakeQuery_6<T>(this, Invocation.method(#startAfter, [values])))
      as _i4.Query<T>);
  @override
  _i4.Query<T> startAtDocument(
          _i4.DocumentSnapshot<Object?>? documentSnapshot) =>
      (super.noSuchMethod(
              Invocation.method(#startAtDocument, [documentSnapshot]),
              returnValue: _FakeQuery_6<T>(this,
                  Invocation.method(#startAtDocument, [documentSnapshot])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> startAt(List<Object?>? values) =>
      (super.noSuchMethod(Invocation.method(#startAt, [values]),
              returnValue:
                  _FakeQuery_6<T>(this, Invocation.method(#startAt, [values])))
          as _i4.Query<T>);
  @override
  _i4.Query<T> where(Object? field,
          {Object? isEqualTo,
          Object? isNotEqualTo,
          Object? isLessThan,
          Object? isLessThanOrEqualTo,
          Object? isGreaterThan,
          Object? isGreaterThanOrEqualTo,
          Object? arrayContains,
          List<Object?>? arrayContainsAny,
          List<Object?>? whereIn,
          List<Object?>? whereNotIn,
          bool? isNull}) =>
      (super.noSuchMethod(
          Invocation.method(#where, [
            field
          ], {
            #isEqualTo: isEqualTo,
            #isNotEqualTo: isNotEqualTo,
            #isLessThan: isLessThan,
            #isLessThanOrEqualTo: isLessThanOrEqualTo,
            #isGreaterThan: isGreaterThan,
            #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
            #arrayContains: arrayContains,
            #arrayContainsAny: arrayContainsAny,
            #whereIn: whereIn,
            #whereNotIn: whereNotIn,
            #isNull: isNull
          }),
          returnValue: _FakeQuery_6<T>(
              this,
              Invocation.method(#where, [
                field
              ], {
                #isEqualTo: isEqualTo,
                #isNotEqualTo: isNotEqualTo,
                #isLessThan: isLessThan,
                #isLessThanOrEqualTo: isLessThanOrEqualTo,
                #isGreaterThan: isGreaterThan,
                #isGreaterThanOrEqualTo: isGreaterThanOrEqualTo,
                #arrayContains: arrayContains,
                #arrayContainsAny: arrayContainsAny,
                #whereIn: whereIn,
                #whereNotIn: whereNotIn,
                #isNull: isNull
              }))) as _i4.Query<T>);
}

/// A class which mocks [QuerySnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockQuerySnapshot<T extends Object?> extends _i1.Mock
    implements _i4.QuerySnapshot<T> {
  MockQuerySnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i4.QueryDocumentSnapshot<T>> get docs =>
      (super.noSuchMethod(Invocation.getter(#docs),
              returnValue: <_i4.QueryDocumentSnapshot<T>>[])
          as List<_i4.QueryDocumentSnapshot<T>>);
  @override
  List<_i4.DocumentChange<T>> get docChanges => (super.noSuchMethod(
      Invocation.getter(#docChanges),
      returnValue: <_i4.DocumentChange<T>>[]) as List<_i4.DocumentChange<T>>);
  @override
  _i4.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
              returnValue:
                  _FakeSnapshotMetadata_11(this, Invocation.getter(#metadata)))
          as _i4.SnapshotMetadata);
  @override
  int get size =>
      (super.noSuchMethod(Invocation.getter(#size), returnValue: 0) as int);
}

/// A class which mocks [DocumentReference].
///
/// See the documentation for Mockito's code generation for more information.
// ignore: must_be_immutable
class MockDocumentReference<T extends Object?> extends _i1.Mock
    implements _i4.DocumentReference<T> {
  MockDocumentReference() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.FirebaseFirestore get firestore => (super.noSuchMethod(
          Invocation.getter(#firestore),
          returnValue:
              _FakeFirebaseFirestore_10(this, Invocation.getter(#firestore)))
      as _i4.FirebaseFirestore);
  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i4.CollectionReference<T> get parent => (super.noSuchMethod(
          Invocation.getter(#parent),
          returnValue:
              _FakeCollectionReference_2<T>(this, Invocation.getter(#parent)))
      as _i4.CollectionReference<T>);
  @override
  String get path =>
      (super.noSuchMethod(Invocation.getter(#path), returnValue: '') as String);
  @override
  _i4.CollectionReference<Map<String, dynamic>> collection(
          String? collectionPath) =>
      (super.noSuchMethod(Invocation.method(#collection, [collectionPath]),
              returnValue: _FakeCollectionReference_2<Map<String, dynamic>>(
                  this, Invocation.method(#collection, [collectionPath])))
          as _i4.CollectionReference<Map<String, dynamic>>);
  @override
  _i8.Future<void> delete() => (super.noSuchMethod(
      Invocation.method(#delete, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> update(Map<String, Object?>? data) => (super.noSuchMethod(
      Invocation.method(#update, [data]),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<_i4.DocumentSnapshot<T>> get([_i3.GetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#get, [options]),
              returnValue: _i8.Future<_i4.DocumentSnapshot<T>>.value(
                  _FakeDocumentSnapshot_12<T>(
                      this, Invocation.method(#get, [options]))))
          as _i8.Future<_i4.DocumentSnapshot<T>>);
  @override
  _i8.Stream<_i4.DocumentSnapshot<T>> snapshots(
          {bool? includeMetadataChanges = false}) =>
      (super.noSuchMethod(
              Invocation.method(#snapshots, [],
                  {#includeMetadataChanges: includeMetadataChanges}),
              returnValue: _i8.Stream<_i4.DocumentSnapshot<T>>.empty())
          as _i8.Stream<_i4.DocumentSnapshot<T>>);
  @override
  _i8.Future<void> set(T? data, [_i3.SetOptions? options]) =>
      (super.noSuchMethod(Invocation.method(#set, [data, options]),
              returnValue: _i8.Future<void>.value(),
              returnValueForMissingStub: _i8.Future<void>.value())
          as _i8.Future<void>);
  @override
  _i4.DocumentReference<R> withConverter<R>(
          {_i4.FromFirestore<R>? fromFirestore,
          _i4.ToFirestore<R>? toFirestore}) =>
      (super.noSuchMethod(
              Invocation.method(#withConverter, [],
                  {#fromFirestore: fromFirestore, #toFirestore: toFirestore}),
              returnValue: _FakeDocumentReference_7<R>(
                  this,
                  Invocation.method(
                      #withConverter, [], {#fromFirestore: fromFirestore, #toFirestore: toFirestore})))
          as _i4.DocumentReference<R>);
}

/// A class which mocks [DocumentSnapshot].
///
/// See the documentation for Mockito's code generation for more information.
class MockDocumentSnapshot<T extends Object?> extends _i1.Mock
    implements _i4.DocumentSnapshot<T> {
  MockDocumentSnapshot() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get id =>
      (super.noSuchMethod(Invocation.getter(#id), returnValue: '') as String);
  @override
  _i4.DocumentReference<T> get reference => (super.noSuchMethod(
          Invocation.getter(#reference),
          returnValue:
              _FakeDocumentReference_7<T>(this, Invocation.getter(#reference)))
      as _i4.DocumentReference<T>);
  @override
  _i4.SnapshotMetadata get metadata =>
      (super.noSuchMethod(Invocation.getter(#metadata),
              returnValue:
                  _FakeSnapshotMetadata_11(this, Invocation.getter(#metadata)))
          as _i4.SnapshotMetadata);
  @override
  bool get exists =>
      (super.noSuchMethod(Invocation.getter(#exists), returnValue: false)
          as bool);
  @override
  dynamic get(Object? field) =>
      super.noSuchMethod(Invocation.method(#get, [field]));
  @override
  dynamic operator [](Object? field) =>
      super.noSuchMethod(Invocation.method(#[], [field]));
}

/// A class which mocks [HttpsCallable].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpsCallable extends _i1.Mock implements _i6.HttpsCallable {
  MockHttpsCallable() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.HttpsCallablePlatform get delegate => (super.noSuchMethod(
          Invocation.getter(#delegate),
          returnValue:
              _FakeHttpsCallablePlatform_13(this, Invocation.getter(#delegate)))
      as _i5.HttpsCallablePlatform);
  @override
  _i8.Future<_i6.HttpsCallableResult<T>> call<T>([dynamic parameters]) =>
      (super.noSuchMethod(Invocation.method(#call, [parameters]),
              returnValue: _i8.Future<_i6.HttpsCallableResult<T>>.value(
                  _FakeHttpsCallableResult_14<T>(
                      this, Invocation.method(#call, [parameters]))))
          as _i8.Future<_i6.HttpsCallableResult<T>>);
}

/// A class which mocks [HiveInterface].
///
/// See the documentation for Mockito's code generation for more information.
class MockHiveInterface extends _i1.Mock implements _i7.HiveInterface {
  MockHiveInterface() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void init(String? path,
          {_i7.HiveStorageBackendPreference? backendPreference =
              _i7.HiveStorageBackendPreference.native}) =>
      super.noSuchMethod(
          Invocation.method(
              #init, [path], {#backendPreference: backendPreference}),
          returnValueForMissingStub: null);
  @override
  _i8.Future<_i7.Box<E>> openBox<E>(String? name,
          {_i7.HiveCipher? encryptionCipher,
          _i7.KeyComparator? keyComparator = _i10.defaultKeyComparator,
          _i7.CompactionStrategy? compactionStrategy =
              _i11.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          _i9.Uint8List? bytes,
          String? collection,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
          Invocation.method(#openBox, [
            name
          ], {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #bytes: bytes,
            #collection: collection,
            #encryptionKey: encryptionKey
          }),
          returnValue: _i8.Future<_i7.Box<E>>.value(_FakeBox_15<E>(
              this,
              Invocation.method(#openBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #bytes: bytes,
                #collection: collection,
                #encryptionKey: encryptionKey
              })))) as _i8.Future<_i7.Box<E>>);
  @override
  _i8.Future<_i7.LazyBox<E>> openLazyBox<E>(String? name,
          {_i7.HiveCipher? encryptionCipher,
          _i7.KeyComparator? keyComparator = _i10.defaultKeyComparator,
          _i7.CompactionStrategy? compactionStrategy =
              _i11.defaultCompactionStrategy,
          bool? crashRecovery = true,
          String? path,
          String? collection,
          List<int>? encryptionKey}) =>
      (super.noSuchMethod(
          Invocation.method(#openLazyBox, [
            name
          ], {
            #encryptionCipher: encryptionCipher,
            #keyComparator: keyComparator,
            #compactionStrategy: compactionStrategy,
            #crashRecovery: crashRecovery,
            #path: path,
            #collection: collection,
            #encryptionKey: encryptionKey
          }),
          returnValue: _i8.Future<_i7.LazyBox<E>>.value(_FakeLazyBox_16<E>(
              this,
              Invocation.method(#openLazyBox, [
                name
              ], {
                #encryptionCipher: encryptionCipher,
                #keyComparator: keyComparator,
                #compactionStrategy: compactionStrategy,
                #crashRecovery: crashRecovery,
                #path: path,
                #collection: collection,
                #encryptionKey: encryptionKey
              })))) as _i8.Future<_i7.LazyBox<E>>);
  @override
  _i7.Box<E> box<E>(String? name) => (super.noSuchMethod(
          Invocation.method(#box, [name]),
          returnValue: _FakeBox_15<E>(this, Invocation.method(#box, [name])))
      as _i7.Box<E>);
  @override
  _i7.LazyBox<E> lazyBox<E>(String? name) =>
      (super.noSuchMethod(Invocation.method(#lazyBox, [name]),
              returnValue:
                  _FakeLazyBox_16<E>(this, Invocation.method(#lazyBox, [name])))
          as _i7.LazyBox<E>);
  @override
  bool isBoxOpen(String? name) =>
      (super.noSuchMethod(Invocation.method(#isBoxOpen, [name]),
          returnValue: false) as bool);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteBoxFromDisk(String? name, {String? path}) =>
      (super.noSuchMethod(
              Invocation.method(#deleteBoxFromDisk, [name], {#path: path}),
              returnValue: _i8.Future<void>.value(),
              returnValueForMissingStub: _i8.Future<void>.value())
          as _i8.Future<void>);
  @override
  _i8.Future<void> deleteFromDisk() => (super.noSuchMethod(
      Invocation.method(#deleteFromDisk, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  List<int> generateSecureKey() =>
      (super.noSuchMethod(Invocation.method(#generateSecureKey, []),
          returnValue: <int>[]) as List<int>);
  @override
  _i8.Future<bool> boxExists(String? name, {String? path}) =>
      (super.noSuchMethod(Invocation.method(#boxExists, [name], {#path: path}),
          returnValue: _i8.Future<bool>.value(false)) as _i8.Future<bool>);
  @override
  void resetAdapters() =>
      super.noSuchMethod(Invocation.method(#resetAdapters, []),
          returnValueForMissingStub: null);
  @override
  void registerAdapter<T>(_i7.TypeAdapter<T>? adapter,
          {bool? internal = false, bool? override = false}) =>
      super.noSuchMethod(
          Invocation.method(#registerAdapter, [adapter],
              {#internal: internal, #override: override}),
          returnValueForMissingStub: null);
  @override
  bool isAdapterRegistered(int? typeId) =>
      (super.noSuchMethod(Invocation.method(#isAdapterRegistered, [typeId]),
          returnValue: false) as bool);
  @override
  void ignoreTypeId<T>(int? typeId) =>
      super.noSuchMethod(Invocation.method(#ignoreTypeId, [typeId]),
          returnValueForMissingStub: null);
}

/// A class which mocks [Box].
///
/// See the documentation for Mockito's code generation for more information.
class MockBox<E> extends _i1.Mock implements _i7.Box<E> {
  MockBox() {
    _i1.throwOnMissingStub(this);
  }

  @override
  Iterable<E> get values =>
      (super.noSuchMethod(Invocation.getter(#values), returnValue: <E>[])
          as Iterable<E>);
  @override
  String get name =>
      (super.noSuchMethod(Invocation.getter(#name), returnValue: '') as String);
  @override
  bool get isOpen =>
      (super.noSuchMethod(Invocation.getter(#isOpen), returnValue: false)
          as bool);
  @override
  bool get lazy =>
      (super.noSuchMethod(Invocation.getter(#lazy), returnValue: false)
          as bool);
  @override
  Iterable<dynamic> get keys =>
      (super.noSuchMethod(Invocation.getter(#keys), returnValue: <dynamic>[])
          as Iterable<dynamic>);
  @override
  int get length =>
      (super.noSuchMethod(Invocation.getter(#length), returnValue: 0) as int);
  @override
  bool get isEmpty =>
      (super.noSuchMethod(Invocation.getter(#isEmpty), returnValue: false)
          as bool);
  @override
  bool get isNotEmpty =>
      (super.noSuchMethod(Invocation.getter(#isNotEmpty), returnValue: false)
          as bool);
  @override
  Iterable<E> valuesBetween({dynamic startKey, dynamic endKey}) =>
      (super.noSuchMethod(
          Invocation.method(
              #valuesBetween, [], {#startKey: startKey, #endKey: endKey}),
          returnValue: <E>[]) as Iterable<E>);
  @override
  E? getAt(int? index) =>
      (super.noSuchMethod(Invocation.method(#getAt, [index])) as E?);
  @override
  Map<dynamic, E> toMap() => (super.noSuchMethod(Invocation.method(#toMap, []),
      returnValue: <dynamic, E>{}) as Map<dynamic, E>);
  @override
  dynamic keyAt(int? index) =>
      super.noSuchMethod(Invocation.method(#keyAt, [index]));
  @override
  _i8.Stream<_i7.BoxEvent> watch({dynamic key}) =>
      (super.noSuchMethod(Invocation.method(#watch, [], {#key: key}),
              returnValue: _i8.Stream<_i7.BoxEvent>.empty())
          as _i8.Stream<_i7.BoxEvent>);
  @override
  bool containsKey(dynamic key) =>
      (super.noSuchMethod(Invocation.method(#containsKey, [key]),
          returnValue: false) as bool);
  @override
  _i8.Future<void> put(dynamic key, E? value) => (super.noSuchMethod(
      Invocation.method(#put, [key, value]),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> putAt(int? index, E? value) => (super.noSuchMethod(
      Invocation.method(#putAt, [index, value]),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> putAll(Map<dynamic, E>? entries) => (super.noSuchMethod(
      Invocation.method(#putAll, [entries]),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<int> add(E? value) =>
      (super.noSuchMethod(Invocation.method(#add, [value]),
          returnValue: _i8.Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<Iterable<int>> addAll(Iterable<E>? values) =>
      (super.noSuchMethod(Invocation.method(#addAll, [values]),
              returnValue: _i8.Future<Iterable<int>>.value(<int>[]))
          as _i8.Future<Iterable<int>>);
  @override
  _i8.Future<void> delete(dynamic key) => (super.noSuchMethod(
      Invocation.method(#delete, [key]),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteAt(int? index) => (super.noSuchMethod(
      Invocation.method(#deleteAt, [index]),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteAll(Iterable<dynamic>? keys) => (super.noSuchMethod(
      Invocation.method(#deleteAll, [keys]),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> compact() => (super.noSuchMethod(
      Invocation.method(#compact, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<int> clear() => (super.noSuchMethod(Invocation.method(#clear, []),
      returnValue: _i8.Future<int>.value(0)) as _i8.Future<int>);
  @override
  _i8.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> deleteFromDisk() => (super.noSuchMethod(
      Invocation.method(#deleteFromDisk, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
  @override
  _i8.Future<void> flush() => (super.noSuchMethod(Invocation.method(#flush, []),
      returnValue: _i8.Future<void>.value(),
      returnValueForMissingStub: _i8.Future<void>.value()) as _i8.Future<void>);
}
